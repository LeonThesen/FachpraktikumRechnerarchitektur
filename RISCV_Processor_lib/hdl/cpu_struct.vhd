--
-- VHDL Architecture RISCV_Processor_lib.cpu.struct
--
-- Created:
--          by - st161569.st161569 (pc029)
--          at - 17:10:55 05/14/24
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.3 Built on 14 Jul 2022 at 13:56:12
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
LIBRARY RISCV_Processor_lib;
USE RISCV_Processor_lib.types.ALL;


ARCHITECTURE struct OF cpu IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL alu_mode_dc         : alu_mode_t;
   SIGNAL alu_mode_ex         : alu_mode_t;
   SIGNAL alu_result_ex       : word;
   SIGNAL alu_result_mem      : word;
   SIGNAL imm_dc              : word;
   SIGNAL imm_ex              : word;
   SIGNAL imm_to_alu_dc       : std_logic;
   SIGNAL imm_to_alu_ex       : std_logic;
   SIGNAL instruction_word_dc : word;
   SIGNAL instruction_word_if : word;
   SIGNAL mem_result_wb       : word;
   SIGNAL operand_a           : word;
   SIGNAL operand_b           : word;
   SIGNAL pc_if               : std_logic_vector(7 DOWNTO 0);
   SIGNAL pc_pf               : std_logic_vector(7 DOWNTO 0);
   SIGNAL rd_addr_dc          : register_file_t;
   SIGNAL rd_addr_ex          : register_file_t;
   SIGNAL rd_addr_mem         : register_file_t;
   SIGNAL rd_addr_wb          : register_file_t;
   SIGNAL rs1_addr            : register_file_t;
   SIGNAL rs1_dc              : word;
   SIGNAL rs2_addr            : register_file_t;
   SIGNAL rs2_dc              : word;
   SIGNAL rs2_ex              : word;


   -- Component Declarations
   COMPONENT alu
   PORT (
      alu_mode_ex   : IN     alu_mode_t ;
      operand_a     : IN     word ;
      operand_b     : IN     word ;
      alu_result_ex : OUT    word 
   );
   END COMPONENT;
   COMPONENT dc_ex_pipeline_reg
   PORT (
      alu_mode_dc   : IN     alu_mode_t ;
      clk           : IN     std_logic ;
      imm_dc        : IN     word ;
      imm_to_alu_dc : IN     std_logic ;
      rd_addr_dc    : IN     register_file_t ;
      res_n         : IN     std_logic ;
      rs1_dc        : IN     word ;
      rs2_dc        : IN     word ;
      alu_mode_ex   : OUT    alu_mode_t ;
      imm_ex        : OUT    word ;
      imm_to_alu_ex : OUT    std_logic ;
      operand_a     : OUT    word ;
      rd_addr_ex    : OUT    register_file_t ;
      rs2_ex        : OUT    word 
   );
   END COMPONENT;
   COMPONENT decoder
   PORT (
      instruction_word_dc : IN     word ;
      alu_mode_dc         : OUT    alu_mode_t ;
      imm_dc              : OUT    word ;
      imm_to_alu_dc       : OUT    std_logic ;
      rd_addr_dc          : OUT    register_file_t ;
      rs1_addr            : OUT    register_file_t ;
      rs2_addr            : OUT    register_file_t 
   );
   END COMPONENT;
   COMPONENT ex_mem_pipeline_reg
   PORT (
      alu_result_ex  : IN     word ;
      clk            : IN     std_logic ;
      rd_addr_ex     : IN     register_file_t ;
      res_n          : IN     std_logic ;
      alu_result_mem : OUT    word ;
      rd_addr_mem    : OUT    register_file_t 
   );
   END COMPONENT;
   COMPONENT if_dc_pipeline_reg
   PORT (
      clk                 : IN     std_logic ;
      instruction_word_if : IN     word ;
      res_n               : IN     std_logic ;
      instruction_word_dc : OUT    word 
   );
   END COMPONENT;
   COMPONENT mem_wb_pipeline_reg
   PORT (
      alu_result_mem : IN     word ;
      clk            : IN     std_logic ;
      rd_addr_mem    : IN     register_file_t ;
      res_n          : IN     std_logic ;
      mem_result_wb  : OUT    word ;
      rd_addr_wb     : OUT    register_file_t 
   );
   END COMPONENT;
   COMPONENT pc_inc
   PORT (
      pc_if : IN     std_logic_vector (7 DOWNTO 0);
      pc_pf : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT pf_if_pipeline_reg
   PORT (
      clk   : IN     std_logic ;
      pc_pf : IN     std_logic_vector (7 DOWNTO 0);
      res_n : IN     std_logic ;
      pc_if : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT register_file
   PORT (
      mem_result_wb : IN     word ;
      rd_addr_wb    : IN     register_file_t ;
      res_n         : IN     std_logic ;
      rs1_addr      : IN     register_file_t ;
      rs2_addr      : IN     register_file_t ;
      rs1_dc        : OUT    word ;
      rs2_dc        : OUT    word 
   );
   END COMPONENT;
   COMPONENT rom
   PORT (
      clk                 : IN     std_logic ;
      pc_if               : IN     std_logic_vector (7 DOWNTO 0);
      res_n               : IN     std_logic ;
      instruction_word_if : OUT    word 
   );
   END COMPONENT;
   COMPONENT rs2_multiplexer
   PORT (
      imm_ex        : IN     word ;
      imm_to_alu_ex : IN     std_logic ;
      rs2_ex        : IN     word ;
      operand_b     : OUT    word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : alu USE ENTITY RISCV_Processor_lib.alu;
   FOR ALL : dc_ex_pipeline_reg USE ENTITY RISCV_Processor_lib.dc_ex_pipeline_reg;
   FOR ALL : decoder USE ENTITY RISCV_Processor_lib.decoder;
   FOR ALL : ex_mem_pipeline_reg USE ENTITY RISCV_Processor_lib.ex_mem_pipeline_reg;
   FOR ALL : if_dc_pipeline_reg USE ENTITY RISCV_Processor_lib.if_dc_pipeline_reg;
   FOR ALL : mem_wb_pipeline_reg USE ENTITY RISCV_Processor_lib.mem_wb_pipeline_reg;
   FOR ALL : pc_inc USE ENTITY RISCV_Processor_lib.pc_inc;
   FOR ALL : pf_if_pipeline_reg USE ENTITY RISCV_Processor_lib.pf_if_pipeline_reg;
   FOR ALL : register_file USE ENTITY RISCV_Processor_lib.register_file;
   FOR ALL : rom USE ENTITY RISCV_Processor_lib.rom;
   FOR ALL : rs2_multiplexer USE ENTITY RISCV_Processor_lib.rs2_multiplexer;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   alu_i : alu
      PORT MAP (
         alu_mode_ex   => alu_mode_ex,
         operand_a     => operand_a,
         operand_b     => operand_b,
         alu_result_ex => alu_result_ex
      );
   dc_ex_pipeline_reg_i : dc_ex_pipeline_reg
      PORT MAP (
         alu_mode_dc   => alu_mode_dc,
         clk           => clk,
         imm_dc        => imm_dc,
         imm_to_alu_dc => imm_to_alu_dc,
         rd_addr_dc    => rd_addr_dc,
         res_n         => res_n,
         rs1_dc        => rs1_dc,
         rs2_dc        => rs2_dc,
         alu_mode_ex   => alu_mode_ex,
         imm_ex        => imm_ex,
         imm_to_alu_ex => imm_to_alu_ex,
         operand_a     => operand_a,
         rd_addr_ex    => rd_addr_ex,
         rs2_ex        => rs2_ex
      );
   decoder_i : decoder
      PORT MAP (
         instruction_word_dc => instruction_word_dc,
         alu_mode_dc         => alu_mode_dc,
         imm_dc              => imm_dc,
         imm_to_alu_dc       => imm_to_alu_dc,
         rd_addr_dc          => rd_addr_dc,
         rs1_addr            => rs1_addr,
         rs2_addr            => rs2_addr
      );
   ex_mem_pipeline_reg_i : ex_mem_pipeline_reg
      PORT MAP (
         alu_result_ex  => alu_result_ex,
         clk            => clk,
         rd_addr_ex     => rd_addr_ex,
         res_n          => res_n,
         alu_result_mem => alu_result_mem,
         rd_addr_mem    => rd_addr_mem
      );
   if_dc_pipeline_reg_i : if_dc_pipeline_reg
      PORT MAP (
         clk                 => clk,
         instruction_word_if => instruction_word_if,
         res_n               => res_n,
         instruction_word_dc => instruction_word_dc
      );
   mem_wb_pipeline_reg_i : mem_wb_pipeline_reg
      PORT MAP (
         alu_result_mem => alu_result_mem,
         clk            => clk,
         rd_addr_mem    => rd_addr_mem,
         res_n          => res_n,
         mem_result_wb  => mem_result_wb,
         rd_addr_wb     => rd_addr_wb
      );
   pc_inc_i : pc_inc
      PORT MAP (
         pc_if => pc_if,
         pc_pf => pc_pf
      );
   pf_if_pipeline_reg_i : pf_if_pipeline_reg
      PORT MAP (
         clk   => clk,
         pc_pf => pc_pf,
         res_n => res_n,
         pc_if => pc_if
      );
   register_file_i : register_file
      PORT MAP (
         mem_result_wb => mem_result_wb,
         rd_addr_wb    => rd_addr_wb,
         res_n         => res_n,
         rs1_addr      => rs1_addr,
         rs2_addr      => rs2_addr,
         rs1_dc        => rs1_dc,
         rs2_dc        => rs2_dc
      );
   rom_i : rom
      PORT MAP (
         clk                 => clk,
         pc_if               => pc_if,
         res_n               => res_n,
         instruction_word_if => instruction_word_if
      );
   rs2_multiplexer_i : rs2_multiplexer
      PORT MAP (
         imm_ex        => imm_ex,
         imm_to_alu_ex => imm_to_alu_ex,
         rs2_ex        => rs2_ex,
         operand_b     => operand_b
      );

END struct;
